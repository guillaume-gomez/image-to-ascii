{"version":3,"sources":["pipeline.ts","useImageData.ts","CanvasImage.tsx","AsciiImage.tsx","Form.tsx","RenderOptionForm.tsx","ImageConverterToAscii.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RgbQuant","require","grayRamp","rampLength","length","toGrayScale","red","green","blue","getCharacterForGrayScale","grayScale","Math","ceil","clampDimensions","image","configuration","maxWidth","maxHeight","autoScale","console","log","rectifiedWidth","floor","pre","document","createElement","style","display","textContent","body","appendChild","getBoundingClientRect","width","height","removeChild","getFontRatio","reducedWidth","reducedHeight","convertToGrayScales","_configuration","rawImage","data","slice","i","ImageData","quantize","colors","rgbquant","dithKern","minHueCols","sample","reduce","Uint8ClampedArray","from","makeImageData","canvas","context","getContext","drawImage","getImageData","initialState","file","useImageData","state","useState","setFile","processing","setProcessing","setImage","colorizeImage","colorizeAscii","backgroundColorAscii","setConfiguration","readFile","submit","reader","FileReader","onload","event","Image","iData","imageDataModified","result","src","readAsDataURL","setConfigurationParam","param","value","hasFile","CanvasImage","imageData","canvasRef","useRef","useEffect","current","putImageData","id","ref","AsciiImage","colorize","drawAsciiMemo","useMemo","pixelsInGrey","convertImageDataToGreyPixels","asciiImage","index","nextChars","drawAscii","drawAsciiWithColorMemo","quantizedImage","compressedData","currentColor","currentOccurence","char","color","nbOccurences","compressImageData","forEach","push","pixelToCssColor","repeat","drawAsciiWithColor","pixel","className","Form","submitCallback","type","onChange","target","files","min","max","e","parseInt","htmlFor","name","checked","disabled","onClick","RenderOptionForm","saveAsImageCallback","ImageConverterToAscii","refImg","node","clonedNode","cloneNode","children","clientWidth","clientHeight","margin","domtoimage","toBlob","then","blob","saveAs","catch","error","alert","backgroundColor","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b6ab8e99.chunk.js","sourcesContent":["import { ConfigurationInterface } from \"./useImageData\";\n\nlet RgbQuant = require('rgbquant');\n\nconst grayRamp : string = '$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/|()1{}[]?-_+~<>i!lI;:,\"^`\\'. ';\nconst rampLength : number = grayRamp.length;\n\nexport function toGrayScale(red: number, green: number, blue: number) : number {\n  return 0.21 * red + 0.72 * green + 0.07 * blue;\n}\n\nexport function getCharacterForGrayScale(grayScale: number) {\n  return grayRamp[Math.ceil((rampLength - 1) * grayScale / 255)];\n}\n\n\nexport function pixels(image: ImageData) : number[][] {\n  let pixels : number[][] = [];\n  for(let i = 0; i < image.data.length; i += 4) {\n    const red = image.data[i];\n    const green = image.data[i + 1];\n    const blue = image.data[i + 2];\n    pixels = [...pixels, [red, green, blue]];\n  }\n  return pixels;\n}\n\nfunction getFontRatio() : number {\n    const pre = document.createElement('pre');\n    pre.style.display = 'inline';\n    pre.textContent = ' ';\n\n    document.body.appendChild(pre);\n    const { width, height } = pre.getBoundingClientRect();\n    document.body.removeChild(pre);\n\n    return height / width;\n};\n\nexport function clampDimensions(image: ImageData, configuration: ConfigurationInterface) : ImageData {\n  const { maxWidth, maxHeight, autoScale } = configuration;\n  console.log(autoScale)\n  \n  const rectifiedWidth = autoScale ? Math.floor(getFontRatio() * image.width) : image.width;\n  if (image.height > maxHeight) {\n    const reducedWidth = Math.floor(rectifiedWidth * maxHeight / image.height);\n    return { ...image, width: reducedWidth, height: maxHeight } as ImageData;\n  }\n\n  if (image.width > maxWidth) {\n    const reducedHeight = Math.floor(image.height * maxWidth / rectifiedWidth);\n    return { ...image, width: maxWidth, height: reducedHeight } as ImageData;\n  }\n\n  return image;\n}\n\n\nexport function convertToGrayScales(image: ImageData, _configuration: ConfigurationInterface) : ImageData {\n  let rawImage: Uint8ClampedArray = image.data.slice();\n  for (let i = 0 ; i < rawImage.length ; i += 4) {\n    const red = rawImage[i];\n    const green = rawImage[i + 1];\n    const blue = rawImage[i + 2];\n\n    const grayScale = toGrayScale(red, green, blue);\n    rawImage[i] = rawImage[i + 1] = rawImage[i + 2] = grayScale;\n  }\n  return new ImageData(rawImage, image.width, image.height);\n};\n\nexport function quantize(image: ImageData, configuration: ConfigurationInterface) {\n  const { colors } = configuration;\n  const rgbquant = new RgbQuant({colors , dithKern: \"FloydSteinberg\", minHueCols: 0});\n  rgbquant.sample(image.data.slice());\n  const rawImage = rgbquant.reduce(image.data.slice());\n  return new ImageData(Uint8ClampedArray.from(rawImage), image.width, image.height);\n}\n\n\nexport function makeImageData(image: HTMLImageElement, width: number, height: number) : ImageData {\n  let canvas = document.createElement(\"canvas\");\n  let context = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n  canvas.height = height;\n  canvas.width = width;\n  context.drawImage(image, 0, 0, width, height);\n  return context.getImageData(0, 0, width, height);\n}\n\n\nexport interface CompressPixel {\n  color: number[];\n  nbOccurences: number;\n  char: string;\n}\n\nexport function compressImageData(quantizedImage: ImageData) : CompressPixel[] {\n  let compressedData : CompressPixel[] = [];\n\n  let currentColor : number[] = [\n    quantizedImage.data[0],\n    quantizedImage.data[1],\n    quantizedImage.data[2]\n  ];\n  let currentOccurence : number = 0;\n\n  for(let i = 0; i < quantizedImage.data.length; i += 4) {\n    const red = quantizedImage.data[i];\n    const green = quantizedImage.data[i + 1];\n    const blue = quantizedImage.data[i + 2];\n\n    if(red !== currentColor[0] || green !== currentColor[1] || blue !== currentColor[2])\n    {\n      const char = getCharacterForGrayScale(toGrayScale(currentColor[0], currentColor[1], currentColor[2]));\n      // flag to avoid an letter after \\n\n      if(currentOccurence > 0) {\n        compressedData = [\n          ...compressedData,\n          {\n\n            color: currentColor.slice(), nbOccurences: currentOccurence, char\n          }\n        ];\n      }\n      currentOccurence = 0;\n      currentColor = [red, green, blue];\n    }\n\n    //end of line\n    if( ((i/4) + 1) % quantizedImage.width === 0) {\n      const char = getCharacterForGrayScale(toGrayScale(currentColor[0], currentColor[1], currentColor[2]));\n      // add new value + \\n that cut the width\n      compressedData = [\n        ...compressedData,\n        {\n          color : currentColor.slice(),\n          nbOccurences: currentOccurence,\n          char\n        },\n        {\n          color: [-1, -1, -1],\n          nbOccurences: 1,\n          char: \"\\n\"\n        }\n      ];\n      currentOccurence = -1;\n    }\n    currentOccurence = currentOccurence + 1;\n  }\n  return compressedData;\n}\n","import { useState } from \"react\";\nimport { clampDimensions, convertToGrayScales, makeImageData, quantize } from \"./pipeline\";\n\nexport interface ConfigurationInterface {\n  maxWidth: number;\n  maxHeight: number;\n  autoScale: boolean;\n  colorizeImage: boolean;\n  colorizeAscii: boolean;\n  colors: number;\n  backgroundColorAscii: string;\n}\n\ninterface useDataImageInterface {\n  configuration: ConfigurationInterface;\n  setConfigurationParam: (param: keyof ConfigurationInterface, value: string | number | boolean) => void;\n  image : ImageData | null;\n  processing: boolean;\n  readFile: (file: File) => void;\n  hasFile: boolean;\n  submit: () => void;\n}\n\ninterface initialStateInterface {\n  file: File | null;\n}\n\nconst initialState : initialStateInterface = {\n  file: null\n}\n\nfunction useImageData(state : initialStateInterface = initialState) {\n  const [file, setFile] = useState<File| null>(state.file);\n  const [processing, setProcessing] = useState<boolean>(false)\n  const [image, setImage] = useState< ImageData | null>(null);\n  const [configuration, setConfiguration ] = useState<ConfigurationInterface>({\n    maxWidth: 80,\n    maxHeight: 80,\n    autoScale: true,\n    colorizeImage: true,\n    colorizeAscii: true,\n    colors: 12,\n    backgroundColorAscii: \"#1D2A49\"\n  });\n\n  function readFile(file: File) {\n    setFile(file);\n  }\n\n  function submit() {\n    if(!file) {\n      return;\n    }\n    setProcessing(true);\n    const reader : FileReader = new FileReader();\n    reader.onload = (event: Event) => {\n      const image : HTMLImageElement = new Image();\n      image.onload = () => {\n        const { width, height } : ImageData = clampDimensions({\n          data: new Uint8ClampedArray(),\n          width: image.width,\n          height: image.height\n        }, configuration);\n\n        const iData : ImageData = makeImageData(image, width, height);\n        let imageDataModified = null;\n        if(configuration.colorizeImage) {\n          imageDataModified = quantize(iData, configuration);\n        } else {\n          imageDataModified = convertToGrayScales(quantize(iData, configuration), configuration);\n        }\n        setImage(imageDataModified);\n        setProcessing(false);\n      }\n      if(reader.result) {\n        // call image onload event\n        image.src = reader.result as string;\n      }\n    };\n    // close the reader\n    reader.readAsDataURL(file);\n  }\n\n  function setConfigurationParam(param: string, value: string | number) {\n    setConfiguration({...configuration, [param]: value });\n  }\n\n  return { image, processing, hasFile: (file !== null), readFile, configuration, setConfigurationParam, submit } as useDataImageInterface;\n}\n\nexport default useImageData;","import React, { useRef, useEffect } from \"react\";\n\nimport \"./CanvasImage.css\";\n\ninterface CanvasImageInterface {\n  imageData: ImageData | null;\n}\n\nfunction CanvasImage({ imageData }: CanvasImageInterface): React.ReactElement {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if(imageData) {\n      const canvas = canvasRef.current;\n      if(!canvas) {\n        return;\n      }\n      const context = canvas.getContext('2d')  as CanvasRenderingContext2D;\n      context.putImageData(imageData, 0, 0);\n    }\n  }, [imageData]);\n\n  if(!imageData) {\n    return <></>;\n  }\n\n  return (\n    <canvas id=\"Canvas-image-container\" width={imageData.width} height={imageData.height} ref={canvasRef}></canvas>\n  );\n}\n\nexport default CanvasImage;\n","import React, { useMemo } from \"react\";\nimport { toGrayScale, pixels, getCharacterForGrayScale, compressImageData, CompressPixel } from \"./pipeline\";\n\nimport './AsciiImage.css';\n\ninterface AsciiImageInterface {\n  imageData: ImageData | null;\n  colorize: boolean;\n  processing: boolean;\n}\n\nfunction AsciiImage({ imageData, colorize, processing }: AsciiImageInterface): React.ReactElement {\n\n  const drawAsciiMemo = useMemo(() => {\n    function drawAscii(imageData : ImageData | null) : string {\n      console.log(\"drawAscii\");\n      if(!imageData) {\n        return \"\";\n      }\n      const grayScales = convertImageDataToGreyPixels(imageData);\n      const result = grayScales.reduce((asciiImage : string, grayScale : number, index : number) => {\n        let nextChars = getCharacterForGrayScale(grayScale);\n\n        if ((index + 1) % imageData.width === 0) {\n            nextChars += '\\n';\n        }\n        return asciiImage + nextChars;\n      }, \"\");\n      return result;\n    }\n\n    return drawAscii(imageData);\n  }, [imageData]);\n\n  const drawAsciiWithColorMemo = useMemo( () => {\n    function drawAsciiWithColor(imageData : ImageData | null ) {\n      console.log(\"drawAsciiWithColor\");\n      if(!imageData) {\n        return \"\";\n      }\n\n      let result : React.ReactNode[] = [];\n      const compressPixels: CompressPixel[] = compressImageData(imageData);\n      compressPixels.forEach(({color, nbOccurences, char}, index) => {\n        if(char === \"\\n\") {\n          result.push(<br key={index+\"br\"} />);\n        } else {\n          result.push(<span key={index} style={{color: pixelToCssColor(color)}}>{char.repeat(nbOccurences)}</span>);\n        }\n      });\n      return result;\n    }\n\n    return drawAsciiWithColor(imageData);\n  }, [imageData]);\n\n  function convertImageDataToGreyPixels(imageData: ImageData) : number[] {\n    let pixelsInGrey : number[] = [];\n\n    for (let i = 0 ; i < imageData.data.length ; i += 4) {\n      const red = imageData.data[i];\n      const green = imageData.data[i + 1];\n      const blue = imageData.data[i + 2];\n      const grayScale = toGrayScale(red, green, blue);\n      pixelsInGrey = [...pixelsInGrey, grayScale];\n    }\n    return pixelsInGrey;\n  }\n\n  function pixelToCssColor(pixel: number[]) : string {\n    const [red, green, blue] = pixel;\n    return `rgb(${red}, ${green}, ${blue})`;\n  }\n\n  if(processing) {\n    return <p>Work in progress...</p>\n  }\n\n  return (\n    <pre className=\"Ascii-content\">\n      {colorize ?\n       drawAsciiWithColorMemo:\n       drawAsciiMemo\n      }\n    </pre>\n  );\n}\n\nexport default AsciiImage;\n\n","import React from \"react\";\nimport { ConfigurationInterface } from \"./useImageData\";\n\nimport \"./Form.css\"\n\ninterface FormInterface {\n  configuration: ConfigurationInterface;\n  setConfigurationParam: (param: keyof ConfigurationInterface, value: string | number | boolean) => void;\n  readFile:  (file: File) => void;\n  hasFile: boolean;\n  submitCallback: () => void;\n}\n\nfunction Form({ configuration, setConfigurationParam, readFile, hasFile, submitCallback }: FormInterface): React.ReactElement {\n  const { maxWidth, maxHeight, colors, colorizeImage, autoScale } = configuration;\n\n  function onChangeFile(event: React.ChangeEvent<HTMLInputElement>) {\n    // get files\n    const files = event.target.files as FileList;\n    const file = files[0];\n    if(file) {\n      readFile(file);\n    }\n  }\n\n  return (\n    <div id=\"Form-content\">\n        <h2 className=\"H2-title\">Setup</h2>\n        <p>\n          <input type=\"file\" onChange={onChangeFile} />\n        </p>\n        <div className=\"Slide-container\">\n          <div className=\"Slide-container-label\">\n            Max Width : {maxWidth}\n          </div>\n          <div className=\"Slide-container-input\">\n            <input type=\"range\" min={80} max={100} value={maxWidth} className=\"slider\" onChange={e => setConfigurationParam(\"maxWidth\", parseInt(e.target.value))} />\n          </div>\n        </div>\n        <div className=\"Slide-container\">\n          <div className=\"Slide-container-label\">\n            Max Height : {maxHeight}\n          </div>\n          <div className=\"Slide-container-input\">\n            <input type=\"range\" min={80} max={100} value={maxHeight} className=\"slider\" onChange={e => setConfigurationParam(\"maxHeight\", parseInt(e.target.value))} />\n          </div>\n        </div>\n        <div className=\"Checkbox-container\">\n           <label htmlFor=\"autoscale\">Autoscale</label>\n           <input type=\"checkbox\" name=\"autoscale\" id=\"autoscale\" checked={autoScale} onChange={e => setConfigurationParam(\"autoScale\", !!e.target.checked)}/>\n        </div>\n        <div className=\"Checkbox-container\">\n           <label htmlFor=\"Colorize\">Colorize Image</label>\n           <input type=\"checkbox\" name=\"Colorize\" id=\"Colorize\" checked={colorizeImage} onChange={e => setConfigurationParam(\"colorizeImage\", !!e.target.checked)}/>\n        </div>\n        <div className=\"Slide-container\">\n          <div className=\"Slide-container-label\">\n            Colors : {colors}\n          </div>\n          <div className=\"Slide-container-input\">\n            <input type=\"range\" min={2} max={68} value={colors} className=\"slider\" onChange={e => setConfigurationParam(\"colors\", parseInt(e.target.value))} />\n          </div>\n        </div>\n        <div className=\"Button-container\">\n          <button type=\"button\" disabled={!hasFile} onClick={submitCallback}>\n              Convert\n          </button>\n        </div>\n    </div>\n  );\n}\n\nexport default Form;\n\n","import React from \"react\";\nimport { ConfigurationInterface } from \"./useImageData\";\n\nimport \"./RenderOptionForm.css\";\n\ninterface FormInterface {\n  configuration: ConfigurationInterface;\n  setConfigurationParam: (param: keyof ConfigurationInterface, value: string | number | boolean) => void;\n  saveAsImageCallback: () => void;\n  hasFile: boolean\n}\n\nfunction RenderOptionForm({ configuration, setConfigurationParam, saveAsImageCallback, hasFile }: FormInterface): React.ReactElement {\n  const { colorizeAscii, backgroundColorAscii } = configuration;\n  return (\n    <div id=\"Option\">\n      <h2 className=\"H2-title\">Options</h2>\n        <div className=\"Checkbox-container-color\">\n           <label htmlFor=\"Colorize\">Colorize Ascii</label><br/>\n           <input type=\"checkbox\" name=\"Colorize\" id=\"Colorize\" checked={colorizeAscii} onChange={e => setConfigurationParam(\"colorizeAscii\", !!e.target.checked)}/>\n        </div>\n        <p id=\"hint\">Toggle this option can takes time to rerender. Please be patient :) </p>\n        <div className=\"ColorPalette\">\n          <label htmlFor=\"background-color-ascii\">Background color ascii</label>\n          <div id=\"Color-input-container\">\n            <input type=\"color\" id=\"background-color-ascii\" name=\"background-color-ascii\" value={backgroundColorAscii} onChange={e => setConfigurationParam(\"backgroundColorAscii\", e.target.value)} />\n          </div>\n        </div>\n        <div id=\"Convert\">\n          <button disabled={!hasFile} onClick={saveAsImageCallback}>Save as image</button>\n        </div>\n    </div>\n  );\n}\n\nexport default RenderOptionForm;\n\n","import React, { useRef } from \"react\";\nimport domtoimage from \"dom-to-image\";\nimport { saveAs } from 'file-saver';\n\nimport useImageData from \"./useImageData\";\nimport CanvasImage from \"./CanvasImage\";\nimport AsciiImage from \"./AsciiImage\";\nimport Form from \"./Form\";\nimport RenderOptionForm from \"./RenderOptionForm\";\n\nimport \"./ImageConverterToAscii.css\";\n\nfunction ImageConverterToAscii(): React.ReactElement {\n  const { image, hasFile, readFile, processing, configuration, setConfigurationParam, submit } = useImageData();\n  const refImg = useRef(null);\n\n  function onChangeFile(event: React.ChangeEvent<HTMLInputElement>) {\n    // get files\n    const files = event.target.files as FileList;\n    const file = files[0];\n    if(file) {\n      readFile(file);\n    }\n  }\n\n  function runConvert() {\n    if(refImg && refImg.current) {\n      const node : HTMLElement = (refImg.current! as HTMLElement);\n      const clonedNode  = node.cloneNode(true);\n      document.body.appendChild(clonedNode);\n      // truncate the image\n      (clonedNode  as HTMLElement).style.width = `${node.children[0].clientWidth}px`;\n      (clonedNode  as HTMLElement).style.height = `${node.children[0].clientHeight}px`;\n      (clonedNode  as HTMLElement).style.margin = \"0\";\n      (clonedNode  as HTMLElement).style.color =  \"white\";\n\n      domtoimage.toBlob(clonedNode)\n        .then(function (blob) {\n           saveAs(blob, 'my-export.png');\n            document.body.removeChild(clonedNode);\n        })\n        .catch(function (error) {\n            console.log(error)\n            alert('oops, something went wrong!');\n        });\n    }\n  }\n\n\n  return (\n    <>\n      <div id=\"Forms\">\n        <div className=\"Form-Item\">\n          <Form configuration={configuration} setConfigurationParam={setConfigurationParam} readFile={readFile} hasFile={hasFile} submitCallback={submit}/>\n        </div>\n        <div className=\"Form-Item\">\n          <RenderOptionForm configuration={configuration} setConfigurationParam={setConfigurationParam} saveAsImageCallback={runConvert} hasFile={true}/>\n          <div id=\"Canvas-Container\">\n            <CanvasImage imageData={image}/>\n          </div>\n        </div>\n      </div>\n      <hr/>\n      <div ref={refImg} id=\"Ascii-container\" style={{ backgroundColor: configuration.backgroundColorAscii }}>\n        <AsciiImage imageData={image} colorize={configuration.colorizeAscii} processing={processing}/>\n      </div>\n    </>\n  );\n}\n\nexport default ImageConverterToAscii;\n","import React from 'react';\nimport ImageConverterToAscii from './ImageConverterToAscii';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Image converter to Ascii\n      </header>\n      <div className=\"App-content\">\n        <ImageConverterToAscii />\n      </div>\n      <footer className=\"App-footer\">\n         Made by Guillaume Gomez\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}