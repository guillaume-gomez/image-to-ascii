{"version":3,"sources":["pipeline.ts","useImageData.ts","CanvasImage.tsx","AsciiImage.tsx","Form.tsx","RenderOptionForm.tsx","ImageConverterToAscii.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RgbQuant","require","toGrayScale","red","green","blue","clampDimensions","image","configuration","maxWidth","maxHeight","autoScale","console","log","rectifiedWidth","Math","floor","pre","document","createElement","style","display","textContent","body","appendChild","getBoundingClientRect","width","height","removeChild","getFontRatio","reducedWidth","reducedHeight","convertToGrayScales","_configuration","rawImage","data","slice","i","length","grayScale","ImageData","quantize","colors","rgbquant","dithKern","minHueCols","sample","reduce","Uint8ClampedArray","from","makeImageData","canvas","context","getContext","drawImage","getImageData","initialState","file","useImageData","state","useState","setFile","processing","setProcessing","setImage","colorizeImage","colorizeAscii","backgroundColorAscii","setConfiguration","readFile","submit","reader","FileReader","onload","event","Image","iData","imageDataModified","result","src","readAsDataURL","setConfigurationParam","param","value","hasFile","CanvasImage","imageData","canvasRef","useRef","useEffect","current","putImageData","id","ref","grayRamp","rampLength","AsciiImage","colorize","drawAsciiMemo","useMemo","convertImageDataToGreyPixels","asciiImage","index","nextChars","getCharacterForGrayScale","drawAscii","drawAsciiWithColorMemo","grayScales","_pixels","pixels","push","color","pixelToCssColor","drawAsciiWithColor","ceil","pixelsInGrey","pixel","className","Form","submitCallback","type","onChange","target","files","min","max","e","parseInt","htmlFor","name","checked","disabled","onClick","RenderOptionForm","saveAsImageCallback","ImageConverterToAscii","refImg","node","clonedNode","cloneNode","children","clientWidth","clientHeight","margin","domtoimage","toBlob","then","blob","saveAs","catch","error","alert","backgroundColor","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ecd5fcdf.chunk.js","sourcesContent":["import { ConfigurationInterface } from \"./useImageData\";\n\nlet RgbQuant = require('rgbquant');\n\nexport function toGrayScale(red: number, green: number, blue: number) : number {\n  return 0.21 * red + 0.72 * green + 0.07 * blue;\n}\n\nexport function pixels(image: ImageData) : number[][] {\n  let pixels : number[][] = [];\n  for(let i = 0; i < image.data.length; i += 4) {\n    const red = image.data[i];\n    const green = image.data[i + 1];\n    const blue = image.data[i + 2];\n    pixels = [...pixels, [red, green, blue]];\n  }\n  return pixels;\n}\n\nfunction getFontRatio() : number {\n    const pre = document.createElement('pre');\n    pre.style.display = 'inline';\n    pre.textContent = ' ';\n\n    document.body.appendChild(pre);\n    const { width, height } = pre.getBoundingClientRect();\n    document.body.removeChild(pre);\n\n    return height / width;\n};\n\nexport function clampDimensions(image: ImageData, configuration: ConfigurationInterface) : ImageData {\n  const { maxWidth, maxHeight, autoScale } = configuration;\n  console.log(autoScale)\n  \n  const rectifiedWidth = autoScale ? Math.floor(getFontRatio() * image.width) : image.width;\n  if (image.height > maxHeight) {\n    const reducedWidth = Math.floor(rectifiedWidth * maxHeight / image.height);\n    return { ...image, width: reducedWidth, height: maxHeight } as ImageData;\n  }\n\n  if (image.width > maxWidth) {\n    const reducedHeight = Math.floor(image.height * maxWidth / rectifiedWidth);\n    return { ...image, width: maxWidth, height: reducedHeight } as ImageData;\n  }\n\n  return image;\n}\n\n\nexport function convertToGrayScales(image: ImageData, _configuration: ConfigurationInterface) : ImageData {\n  let rawImage: Uint8ClampedArray = image.data.slice();\n  for (let i = 0 ; i < rawImage.length ; i += 4) {\n    const red = rawImage[i];\n    const green = rawImage[i + 1];\n    const blue = rawImage[i + 2];\n\n    const grayScale = toGrayScale(red, green, blue);\n    rawImage[i] = rawImage[i + 1] = rawImage[i + 2] = grayScale;\n  }\n  return new ImageData(rawImage, image.width, image.height);\n};\n\nexport function quantize(image: ImageData, configuration: ConfigurationInterface) {\n  const { colors } = configuration;\n  const rgbquant = new RgbQuant({colors , dithKern: \"FloydSteinberg\", minHueCols: 0});\n  rgbquant.sample(image.data.slice());\n  const rawImage = rgbquant.reduce(image.data.slice());\n  return new ImageData(Uint8ClampedArray.from(rawImage), image.width, image.height);\n}\n\n\nexport function makeImageData(image: HTMLImageElement, width: number, height: number) : ImageData {\n  let canvas = document.createElement(\"canvas\");\n  let context = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n  canvas.height = height;\n  canvas.width = width;\n  context.drawImage(image, 0, 0, width, height);\n  return context.getImageData(0, 0, width, height);\n}\n\n","import { useState } from \"react\";\nimport { clampDimensions, convertToGrayScales, makeImageData, quantize } from \"./pipeline\";\n\nexport interface ConfigurationInterface {\n  maxWidth: number;\n  maxHeight: number;\n  autoScale: boolean;\n  colorizeImage: boolean;\n  colorizeAscii: boolean;\n  colors: number;\n  backgroundColorAscii: string;\n}\n\ninterface useDataImageInterface {\n  configuration: ConfigurationInterface;\n  setConfigurationParam: (param: keyof ConfigurationInterface, value: string | number | boolean) => void;\n  image : ImageData | null;\n  processing: boolean;\n  readFile: (file: File) => void;\n  hasFile: boolean;\n  submit: () => void;\n}\n\ninterface initialStateInterface {\n  file: File | null;\n}\n\nconst initialState : initialStateInterface = {\n  file: null\n}\n\nfunction useImageData(state : initialStateInterface = initialState) {\n  const [file, setFile] = useState<File| null>(state.file);\n  const [processing, setProcessing] = useState<boolean>(false)\n  const [image, setImage] = useState< ImageData | null>(null);\n  const [configuration, setConfiguration ] = useState<ConfigurationInterface>({\n    maxWidth: 80,\n    maxHeight: 80,\n    autoScale: true,\n    colorizeImage: false,\n    colorizeAscii: false,\n    colors: 12,\n    backgroundColorAscii: \"#1D2A49\"\n  });\n\n  function readFile(file: File) {\n    setFile(file);\n  }\n\n  function submit() {\n    if(!file) {\n      return;\n    }\n    setProcessing(true);\n    const reader : FileReader = new FileReader();\n    reader.onload = (event: Event) => {\n      const image : HTMLImageElement = new Image();\n      image.onload = () => {\n        const { width, height } : ImageData = clampDimensions({\n          data: new Uint8ClampedArray(),\n          width: image.width,\n          height: image.height\n        }, configuration);\n\n        const iData : ImageData = makeImageData(image, width, height);\n        let imageDataModified = null;\n        if(configuration.colorizeImage) {\n          imageDataModified = quantize(iData, configuration);\n        } else {\n          imageDataModified = convertToGrayScales(quantize(iData, configuration), configuration);\n        }\n        setImage(imageDataModified);\n        setProcessing(false);\n      }\n      if(reader.result) {\n        // call image onload event\n        image.src = reader.result as string;\n      }\n    };\n    // close the reader\n    reader.readAsDataURL(file);\n  }\n\n  function setConfigurationParam(param: string, value: string | number) {\n    setConfiguration({...configuration, [param]: value });\n  }\n\n  return { image, processing, hasFile: (file !== null), readFile, configuration, setConfigurationParam, submit } as useDataImageInterface;\n}\n\nexport default useImageData;","import React, { useRef, useEffect } from \"react\";\n\nimport \"./CanvasImage.css\";\n\ninterface CanvasImageInterface {\n  imageData: ImageData | null;\n}\n\nfunction CanvasImage({ imageData }: CanvasImageInterface): React.ReactElement {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if(imageData) {\n      const canvas = canvasRef.current;\n      if(!canvas) {\n        return;\n      }\n      const context = canvas.getContext('2d')  as CanvasRenderingContext2D;\n      context.putImageData(imageData, 0, 0);\n    }\n  }, [imageData]);\n\n  if(!imageData) {\n    return <></>;\n  }\n\n  return (\n    <canvas id=\"Canvas-image-container\" width={imageData.width} height={imageData.height} ref={canvasRef}></canvas>\n  );\n}\n\nexport default CanvasImage;\n","import React, { useMemo } from \"react\";\nimport { toGrayScale, pixels } from \"./pipeline\";\n\nimport './AsciiImage.css';\n\n\nconst grayRamp : string = '$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/|()1{}[]?-_+~<>i!lI;:,\"^`\\'. ';\nconst rampLength : number = grayRamp.length;\n\ninterface AsciiImageInterface {\n  imageData: ImageData | null;\n  colorize: boolean;\n  processing: boolean;\n}\n\nfunction AsciiImage({ imageData, colorize, processing }: AsciiImageInterface): React.ReactElement {\n\n  const drawAsciiMemo = useMemo(() => {\n    function drawAscii(imageData : ImageData | null) : string {\n      console.log(\"drawAscii\");\n      if(!imageData) {\n        return \"\";\n      }\n      const grayScales = convertImageDataToGreyPixels(imageData);\n      const result = grayScales.reduce((asciiImage : string, grayScale : number, index : number) => {\n        let nextChars = getCharacterForGrayScale(grayScale);\n\n        if ((index + 1) % imageData.width === 0) {\n            nextChars += '\\n';\n        }\n        return asciiImage + nextChars;\n      }, \"\");\n      return result;\n    }\n\n    return drawAscii(imageData);\n  }, [imageData]);\n\n  const drawAsciiWithColorMemo = useMemo( () => {\n    function drawAsciiWithColor(imageData : ImageData | null ) {\n      console.log(\"drawAsciiWithColor\");\n      if(!imageData) {\n        return \"\";\n      }\n      const grayScales = convertImageDataToGreyPixels(imageData);\n      const _pixels : number[][] = pixels(imageData);\n      if(grayScales.length !== _pixels.length) {\n        return <></>;\n      }\n\n      let result = [];\n\n      for(let index = 0; index < grayScales.length; ++index) {\n        let nextChars = getCharacterForGrayScale(grayScales[index]);\n        if ((index + 1) % imageData.width === 0) {\n            result.push(<br key={index+\"br\"} />);\n        }\n        result.push(<span key={index} style={{color: pixelToCssColor(_pixels[index]) }}>{nextChars}</span>);\n      }\n      return result;\n    }\n\n    return drawAsciiWithColor(imageData);\n  }, [imageData]);\n\n  function getCharacterForGrayScale(grayScale: number) {\n    return grayRamp[Math.ceil((rampLength - 1) * grayScale / 255)];\n  }\n\n  function convertImageDataToGreyPixels(imageData: ImageData) : number[] {\n    let pixelsInGrey : number[] = [];\n\n    for (let i = 0 ; i < imageData.data.length ; i += 4) {\n      const red = imageData.data[i];\n      const green = imageData.data[i + 1];\n      const blue = imageData.data[i + 2];\n      const grayScale = toGrayScale(red, green, blue);\n      pixelsInGrey = [...pixelsInGrey, grayScale];\n    }\n    return pixelsInGrey;\n  }\n\n  function pixelToCssColor(pixel: number[]) : string {\n    const [red, green, blue] = pixel;\n    return `rgb(${red}, ${green}, ${blue})`;\n  }\n\n  if(processing) {\n    return <p>Work in progress...</p>\n  }\n\n  return (\n    <pre className=\"Ascii-content\">\n      {colorize ?\n       drawAsciiWithColorMemo:\n       drawAsciiMemo\n      }\n    </pre>\n  );\n}\n\nexport default AsciiImage;\n\n","import React from \"react\";\nimport { ConfigurationInterface } from \"./useImageData\";\n\nimport \"./Form.css\"\n\ninterface FormInterface {\n  configuration: ConfigurationInterface;\n  setConfigurationParam: (param: keyof ConfigurationInterface, value: string | number | boolean) => void;\n  readFile:  (file: File) => void;\n  hasFile: boolean;\n  submitCallback: () => void;\n}\n\nfunction Form({ configuration, setConfigurationParam, readFile, hasFile, submitCallback }: FormInterface): React.ReactElement {\n  const { maxWidth, maxHeight, colors, colorizeImage, autoScale } = configuration;\n\n  function onChangeFile(event: React.ChangeEvent<HTMLInputElement>) {\n    // get files\n    const files = event.target.files as FileList;\n    const file = files[0];\n    if(file) {\n      readFile(file);\n    }\n  }\n\n  return (\n    <div id=\"Form-content\">\n        <h2 className=\"H2-title\">Setup</h2>\n        <p>\n          <input type=\"file\" onChange={onChangeFile} />\n        </p>\n        <div className=\"Slide-container\">\n          <div className=\"Slide-container-label\">\n            Max Width : {maxWidth}\n          </div>\n          <div className=\"Slide-container-input\">\n            <input type=\"range\" min={80} max={100} value={maxWidth} className=\"slider\" onChange={e => setConfigurationParam(\"maxWidth\", parseInt(e.target.value))} />\n          </div>\n        </div>\n        <div className=\"Slide-container\">\n          <div className=\"Slide-container-label\">\n            Max Height : {maxHeight}\n          </div>\n          <div className=\"Slide-container-input\">\n            <input type=\"range\" min={80} max={100} value={maxHeight} className=\"slider\" onChange={e => setConfigurationParam(\"maxHeight\", parseInt(e.target.value))} />\n          </div>\n        </div>\n        <div className=\"Checkbox-container\">\n           <label htmlFor=\"autoscale\">Autoscale</label>\n           <input type=\"checkbox\" name=\"autoscale\" id=\"autoscale\" checked={autoScale} onChange={e => setConfigurationParam(\"autoScale\", !!e.target.checked)}/>\n        </div>\n        <div className=\"Checkbox-container\">\n           <label htmlFor=\"Colorize\">Colorize Image</label>\n           <input type=\"checkbox\" name=\"Colorize\" id=\"Colorize\" checked={colorizeImage} onChange={e => setConfigurationParam(\"colorizeImage\", !!e.target.checked)}/>\n        </div>\n        <div className=\"Slide-container\">\n          <div className=\"Slide-container-label\">\n            Colors : {colors}\n          </div>\n          <div className=\"Slide-container-input\">\n            <input type=\"range\" min={2} max={68} value={colors} className=\"slider\" onChange={e => setConfigurationParam(\"colors\", parseInt(e.target.value))} />\n          </div>\n        </div>\n        <div className=\"Button-container\">\n          <button type=\"button\" disabled={!hasFile} onClick={submitCallback}>\n              Convert\n          </button>\n        </div>\n    </div>\n  );\n}\n\nexport default Form;\n\n","import React from \"react\";\nimport { ConfigurationInterface } from \"./useImageData\";\n\nimport \"./RenderOptionForm.css\";\n\ninterface FormInterface {\n  configuration: ConfigurationInterface;\n  setConfigurationParam: (param: keyof ConfigurationInterface, value: string | number | boolean) => void;\n  saveAsImageCallback: () => void;\n  hasFile: boolean\n}\n\nfunction RenderOptionForm({ configuration, setConfigurationParam, saveAsImageCallback, hasFile }: FormInterface): React.ReactElement {\n  const { colorizeAscii, backgroundColorAscii } = configuration;\n  return (\n    <div id=\"Option\">\n      <h2 className=\"H2-title\">Options</h2>\n        <div className=\"Checkbox-container-color\">\n           <label htmlFor=\"Colorize\">Colorize Ascii</label><br/>\n           <input type=\"checkbox\" name=\"Colorize\" id=\"Colorize\" checked={colorizeAscii} onChange={e => setConfigurationParam(\"colorizeAscii\", !!e.target.checked)}/>\n        </div>\n        <p className=\"hint\">Toggle this option can takes time to rerender. Please be patient :) </p>\n        <div className=\"ColorPalette\">\n          <label htmlFor=\"background-color-ascii\">Background color ascii</label>\n          <div id=\"Color-input-container\">\n            <input type=\"color\" id=\"background-color-ascii\" name=\"background-color-ascii\" value={backgroundColorAscii} onChange={e => setConfigurationParam(\"backgroundColorAscii\", e.target.value)} />\n          </div>\n        </div>\n        <div id=\"Convert\">\n          <button disabled={!hasFile} onClick={saveAsImageCallback}>Save as image</button>\n        </div>\n    </div>\n  );\n}\n\nexport default RenderOptionForm;\n\n","import React, { useRef } from \"react\";\nimport domtoimage from \"dom-to-image\";\nimport { saveAs } from 'file-saver';\n\nimport useImageData from \"./useImageData\";\nimport CanvasImage from \"./CanvasImage\";\nimport AsciiImage from \"./AsciiImage\";\nimport Form from \"./Form\";\nimport RenderOptionForm from \"./RenderOptionForm\";\n\nimport \"./ImageConverterToAscii.css\";\n\nfunction ImageConverterToAscii(): React.ReactElement {\n  const { image, hasFile, readFile, processing, configuration, setConfigurationParam, submit } = useImageData();\n  const refImg = useRef(null);\n\n  function onChangeFile(event: React.ChangeEvent<HTMLInputElement>) {\n    // get files\n    const files = event.target.files as FileList;\n    const file = files[0];\n    if(file) {\n      readFile(file);\n    }\n  }\n\n  function runConvert() {\n    if(refImg && refImg.current) {\n      const node : HTMLElement = (refImg.current! as HTMLElement);\n      const clonedNode  = node.cloneNode(true);\n      document.body.appendChild(clonedNode);\n      // truncate the image\n      (clonedNode  as HTMLElement).style.width = `${node.children[0].clientWidth}px`;\n      (clonedNode  as HTMLElement).style.height = `${node.children[0].clientHeight}px`;\n      (clonedNode  as HTMLElement).style.margin = \"0\";\n      (clonedNode  as HTMLElement).style.color =  \"white\";\n\n      domtoimage.toBlob(clonedNode)\n        .then(function (blob) {\n           saveAs(blob, 'my-export.png');\n            document.body.removeChild(clonedNode);\n        })\n        .catch(function (error) {\n            console.log(error)\n            alert('oops, something went wrong!');\n        });\n    }\n  }\n\n\n  return (\n    <>\n      <div id=\"Forms\">\n        <div className=\"Form-Item\">\n          <Form configuration={configuration} setConfigurationParam={setConfigurationParam} readFile={readFile} hasFile={hasFile} submitCallback={submit}/>\n        </div>\n        <div className=\"Form-Item\">\n          <RenderOptionForm configuration={configuration} setConfigurationParam={setConfigurationParam} saveAsImageCallback={runConvert} hasFile={true}/>\n          <div id=\"Canvas-Container\">\n            <CanvasImage imageData={image}/>\n          </div>\n        </div>\n      </div>\n      <hr/>\n      <div ref={refImg} id=\"Ascii-container\" style={{ backgroundColor: configuration.backgroundColorAscii }}>\n        <AsciiImage imageData={image} colorize={configuration.colorizeAscii} processing={processing}/>\n      </div>\n    </>\n  );\n}\n\nexport default ImageConverterToAscii;\n","import React from 'react';\nimport ImageConverterToAscii from './ImageConverterToAscii';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Image converter to Ascii\n      </header>\n      <div className=\"App-content\">\n        <ImageConverterToAscii />\n      </div>\n      <footer className=\"App-footer\">\n         Made by Guillaume Gomez\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}